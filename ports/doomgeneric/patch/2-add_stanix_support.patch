diff --git a/doomgeneric/Makefile.stanix b/doomgeneric/Makefile.stanix
new file mode 100644
index 0000000..5a0126a
--- /dev/null
+++ b/doomgeneric/Makefile.stanix
@@ -0,0 +1,18 @@
+
+OBJ = dummy.o am_map.o doomdef.o doomstat.o dstrings.o d_event.o d_items.o d_iwad.o d_loop.o d_main.o d_mode.o d_net.o f_finale.o f_wipe.o g_game.o hu_lib.o hu_stuff.o info.o i_cdmus.o i_endoom.o i_joystick.o i_scale.o i_sound.o i_system.o i_timer.o memio.o m_argv.o m_bbox.o m_cheat.o m_config.o m_controls.o m_fixed.o m_menu.o m_misc.o m_random.o p_ceilng.o p_doors.o p_enemy.o p_floor.o p_inter.o p_lights.o p_map.o p_maputl.o p_mobj.o p_plats.o p_pspr.o p_saveg.o p_setup.o p_sight.o p_spec.o p_switch.o p_telept.o p_tick.o p_user.o r_bsp.o r_data.o r_draw.o r_main.o r_plane.o r_segs.o r_sky.o r_things.o sha1.o sounds.o statdump.o st_lib.o st_stuff.o s_sound.o tables.o v_video.o wi_stuff.o w_checksum.o w_file.o w_main.o w_wad.o z_zone.o w_file_stdc.o i_input.o i_video.o doomgeneric.o doomgeneric_stanix.o
+
+OUT = doom
+
+
+#cc flags
+CFLAGS += -Wimplicit-function-declaration
+CFLAGS += -I ./
+
+all : ${OUT}
+
+${OUT} : ${OBJ}
+	${CC} ${LDFLAGS} -o ${OUT} ${OBJ}
+
+%.o : %.c
+	${CC} ${CFLAGS} -o $@ -g -c $^
+
diff --git a/doomgeneric/doom b/doomgeneric/doom
new file mode 100755
index 0000000..45a9fb2
Binary files /dev/null and b/doomgeneric/doom differ
diff --git a/doomgeneric/doomgeneric_stanix.c b/doomgeneric/doomgeneric_stanix.c
new file mode 100644
index 0000000..27b41a5
--- /dev/null
+++ b/doomgeneric/doomgeneric_stanix.c
@@ -0,0 +1,158 @@
+#include <errno.h>
+#include <fcntl.h>
+#include <input.h>
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/time.h>
+#include <sys/fb.h>
+#include <sys/ioctl.h>
+#include <unistd.h>
+
+#include "doomgeneric.h"
+#include "doomkeys.h"
+#include "i_system.h"
+
+int framebuffer_fd = -1;
+int keyboard_fd = -1;
+
+// todo get this with ioctl
+struct fb fb_info;
+
+
+// keep track of when the game started
+uint64_t start_ms;
+
+// convert an timeval to ms
+uint64_t timeval2ms(struct timeval *time) {
+    return time->tv_sec * 1000 + time->tv_usec / 1000;
+}
+
+void DG_Quit(void){
+    ioctl(keyboard_fd,I_INPUT_DROP_CONTROL,NULL);
+}
+
+void DG_Init() {
+    printf("init devices\n");
+
+    // first open the framebuffer
+    printf("open framebuffer\n");
+    framebuffer_fd = open("/dev/fb0", O_WRONLY);
+    if (framebuffer_fd < 0) {
+        // fail to open
+        perror("open /dev/fb0");
+        abort();
+    }
+    if(ioctl(framebuffer_fd,IOCTL_GET_FB_INFO,&fb_info));
+
+    // now open keyboard device
+    printf("open keyboard\n");
+    keyboard_fd = open("/dev/kb0", O_RDONLY | O_NONBLOCK);
+    if (keyboard_fd < 0) {
+        // fail to open
+        perror("open /dev/kb0");
+        abort();
+    }
+    ioctl(keyboard_fd,I_INPUT_GET_CONTROL,NULL);
+
+    // get the time
+    struct timeval current_time;
+    gettimeofday(&current_time, NULL);
+    start_ms = timeval2ms(&current_time);
+
+    atexit(DG_Quit);
+}
+
+void DG_SleepMs(uint32_t ms) { usleep(ms * 1000); }
+
+// i don't like the fact that it is an uint32_t
+// should be an uint64_t instead
+uint32_t DG_GetTicksMs() {
+    // get the time
+    struct timeval current_time;
+    gettimeofday(&current_time, NULL);
+    uint64_t ms = timeval2ms(&current_time) - start_ms;
+    return (uint32_t)ms;
+}
+
+int DG_GetKey(int *pressed, unsigned char *key) {
+    struct input_event event;
+    if (read(keyboard_fd, &event, sizeof(event)) < 1) {
+        // no key to read
+        return 0;
+    }
+
+    // ignore not key event
+    if (event.ie_type != IE_KEY_EVENT) {
+        return 0;
+    }
+
+    *pressed = event.ie_key.flags & IE_KEY_PRESS;
+   
+    switch (event.ie_key.scancode) {
+        case 0x01:
+            *key = KEY_ESCAPE;
+            return 1;
+        case 0x1C:
+            *key = KEY_ENTER;
+            return 1;
+        case 0x2A:
+        case 0x36:
+            *key = KEY_RSHIFT;
+            return 1;
+        case 0x1D:
+            *key = KEY_FIRE;
+            return 1;
+        case 0x80 + 0x48:
+        case 0x11:
+            *key = KEY_UPARROW;
+            return 1;
+        case 0x80 + 0x4B:
+        case 0x1E:
+            *key = KEY_LEFTARROW;
+            return 1;
+        case 0x80 + 0x50:
+        case 0x1F:
+            *key = KEY_DOWNARROW;
+            return 1;
+        case 0x80 + 0x4D:
+        case 0x20:
+            *key = KEY_RIGHTARROW;
+            return 1;
+        case 0x39:
+            *key = KEY_USE;
+            return 1;
+        case 0x15:
+            *key = 'y';
+            return 1;
+
+    }
+    *key = event.ie_key.scancode;
+    return 1;
+}
+
+void DG_DrawFrame() {
+    // copy to the framebuffer device
+    for (size_t i = 0; i < DOOMGENERIC_RESY; i++) {
+        lseek(framebuffer_fd, i * fb_info.pitch, SEEK_SET);
+        write(framebuffer_fd, DG_ScreenBuffer + i * DOOMGENERIC_RESX,
+              DOOMGENERIC_RESX * sizeof(pixel_t));
+    }
+}
+
+void DG_SetWindowTitle(const char *title) {
+    // no window no problem
+    (void)title;
+}
+
+int main(int argc, char **argv) {
+    printf("launching doom...\n");
+
+    doomgeneric_Create(argc, argv);
+
+    for (;;) {
+        doomgeneric_Tick();
+    }
+    return 0;
+}
